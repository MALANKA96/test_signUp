{"version":3,"sources":["component/SignUp.js","store/store.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","form","width","submit","margin","SignUpReduxForm","reduxForm","validate","values","touched","errors","login","length","email","test","pass","c_pass","handleSubmit","classes","Container","component","maxWidth","CssBaseline","className","Typography","variant","noValidate","onSubmit","Grid","container","item","xs","Field","placeholder","name","id","label","InputTextField","title","type","Button","fullWidth","color","justify","Link","href","input","meta","props","hasError","error","TextField","autoComplete","required","helperText","SignUp","formData","console","log","reducers","combineReducers","formReducer","store","createStore","window","App","rerender","ReactDOM","render","document","getElementById","subscribe"],"mappings":"oRAuCMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,KAAM,CACJC,MAAO,OACPN,UAAWF,EAAMG,QAAQ,IAE3BM,OAAQ,CACNC,OAAQV,EAAMG,QAAQ,EAAG,EAAG,QAmF1BQ,EAAkBC,YAAU,CAChCL,KAAM,SACNM,SA7He,SAACC,EAAQC,GACxB,IAAMC,EAAS,GAwBf,OAvBKF,EAAOG,OAASF,EACnBC,EAAOC,MAAQ,iBACNH,EAAOG,MAAMC,OAAS,KAC/BF,EAAOC,MAAQ,iCAEZH,EAAOK,MAEA,4CAA4CC,KAAKN,EAAOK,SAClEH,EAAOG,MAAQ,yBAFfH,EAAOG,MAAQ,sBAIZL,EAAOO,KAEDP,EAAOO,KAAKH,OAAS,IAC9BF,EAAOK,KAAO,kCAFdL,EAAOK,KAAO,yBAIZP,EAAOQ,QAAUR,EAAOQ,SAAWR,EAAOO,OAC5CL,EAAOM,OAAS,uCAEbR,EAAOQ,OAEDR,EAAOQ,OAAOJ,OAAS,IAChCF,EAAOM,OAAS,uCAFhBN,EAAOM,OAAS,yBAIXN,IAkGeJ,EA/EL,SAAC,GAAsB,IAApBW,EAAmB,EAAnBA,aACdC,EAAU1B,IAEhB,OACE,eAAC2B,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,UACE,cAACC,EAAA,EAAD,IACA,sBAAKC,UAAWL,EAAQvB,MAAxB,UACE,cAAC6B,EAAA,EAAD,CAAYJ,UAAU,KAAKK,QAAQ,KAAnC,qBAGA,uBAAMF,UAAWL,EAAQjB,KAAMyB,YAAU,EAACC,SAAUV,EAApD,UACE,eAACW,EAAA,EAAD,CAAMC,WAAS,EAAChC,QAAS,EAAzB,UACE,cAAC+B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CACEC,YAAa,QACbC,KAAM,QACNC,GAAI,QACJC,MAAO,QACPhB,UAAWiB,EACXC,MAAM,uBAGV,cAACV,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CACEC,YAAa,QACbC,KAAM,QACNC,GAAI,QACJC,MAAO,QACPhB,UAAWiB,EACXE,KAAM,QACND,MAAO,uBAIX,cAACV,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CACEC,YAAa,WACbC,KAAM,OACNC,GAAI,WACJC,MAAO,WACPhB,UAAWiB,EACXE,KAAM,WACND,MAAO,8BAGX,cAACV,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CACEC,YAAa,mBACbC,KAAM,SACNC,GAAI,SACJC,MAAO,mBACPhB,UAAWiB,EACXE,KAAM,WACND,MAAO,0BAIb,cAACE,EAAA,EAAD,CACED,KAAK,SACLE,WAAS,EACThB,QAAQ,YACRiB,MAAM,UACNnB,UAAWL,EAAQf,OALrB,oBASA,cAACyB,EAAA,EAAD,CAAMC,WAAS,EAACc,QAAQ,WAAxB,SACE,cAACf,EAAA,EAAD,CAAME,MAAI,EAAV,SACE,cAACc,EAAA,EAAD,CAAMC,KAAK,IAAIpB,QAAQ,QAAvB,8DA2BRY,EAAiB,SAAC,GAA+B,IAA7BS,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAASC,EAAY,gCAC9CC,EAAWF,EAAKtC,SAAWsC,EAAKG,MAEtC,OACE,cAACC,EAAA,EAAD,uCACML,GACAE,GAFN,IAGEI,aAAa,MACb3B,QAAQ,WACRgB,WAAS,EACTY,UAAQ,EACRH,QAASD,EACTK,WAAYL,MAKHM,EA5BA,WAIb,OACE,mCACE,cAAClD,EAAD,CAAiBsB,SALJ,SAAC6B,GAChBC,QAAQC,IAAIF,S,yBC1IZG,EAAWC,YAAgB,CAC3B3D,KAAM4D,MAGNC,EAAQC,YAAYJ,GAGxBK,OAAOF,MAAQA,EACAA,QCEAG,EARH,WACV,OACE,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,EAAD,OCFFI,EAAW,WACbC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,UAGnDJ,IAEAJ,EAAMS,WAAU,WACdL,S","file":"static/js/main.972ad365.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nconst validate = (values, touched) => {\r\n  const errors = {};\r\n  if (!values.login && touched) {\r\n    errors.login = \"create a login\";\r\n  } else if (values.login.length > 15) {\r\n    errors.login = \"must be 15 characters or less\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"enter a valid email\";\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = \"Invalid email address\";\r\n  }\r\n  if (!values.pass) {\r\n    errors.pass = \"—Åreate a password\";\r\n  } else if (values.pass.length < 8) {\r\n    errors.pass = \"minimum number of characters 8\";\r\n  }\r\n  if (values.c_pass && values.c_pass !== values.pass) {\r\n    errors.c_pass = \"password confirmation doesn't match\";\r\n  }\r\n  if (!values.c_pass) {\r\n    errors.c_pass = \"enter confirm password\";\r\n  } else if (values.c_pass.length < 1) {\r\n    errors.c_pass = \"password confirmation doesn't match\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst SignUpForm = ({ handleSubmit }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Field\r\n                placeholder={\"login\"}\r\n                name={\"login\"}\r\n                id={\"login\"}\r\n                label={\"login\"}\r\n                component={InputTextField}\r\n                title=\"enter your login\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Field\r\n                placeholder={\"email\"}\r\n                name={\"email\"}\r\n                id={\"email\"}\r\n                label={\"email\"}\r\n                component={InputTextField}\r\n                type={\"email\"}\r\n                title={\"enter your email\"}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Field\r\n                placeholder={\"password\"}\r\n                name={\"pass\"}\r\n                id={\"password\"}\r\n                label={\"password\"}\r\n                component={InputTextField}\r\n                type={\"password\"}\r\n                title={\"enter a strong password\"}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Field\r\n                placeholder={\"confirm password\"}\r\n                name={\"c_pass\"}\r\n                id={\"c_pass\"}\r\n                label={\"confirm password\"}\r\n                component={InputTextField}\r\n                type={\"password\"}\r\n                title={\"confirm password\"}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Submit\r\n          </Button>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item>\r\n              <Link href=\"#\" variant=\"body2\">\r\n                Already have an account? Sign in\r\n              </Link>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst SignUpReduxForm = reduxForm({\r\n  form: \"singUp\",\r\n  validate,\r\n})(SignUpForm);\r\n\r\nconst SignUp = () => {\r\n  const onSubmit = (formData) => {\r\n    console.log(formData);\r\n  };\r\n  return (\r\n    <>\r\n      <SignUpReduxForm onSubmit={onSubmit} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst InputTextField = ({ input, meta, ...props }) => {\r\n  const hasError = meta.touched && meta.error;\r\n\r\n  return (\r\n    <TextField\r\n      {...input}\r\n      {...props}\r\n      autoComplete=\"off\"\r\n      variant=\"outlined\"\r\n      fullWidth\r\n      required\r\n      error={!!hasError}\r\n      helperText={hasError}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import {combineReducers, createStore } from \"redux\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\n\r\nlet reducers = combineReducers({\r\n    form: formReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\n\r\nwindow.store = store;\r\nexport default store;\r\n","import * as React from \"react\";\r\nimport SignUp from \"./component/SignUp\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/store\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <SignUp />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./store/store\";\r\n\r\nlet rerender = () => {\r\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\r\n};\r\n\r\nrerender();\r\n\r\nstore.subscribe(() => {\r\n  rerender();\r\n});"],"sourceRoot":""}